{
	"info": {
		"_postman_id": "0f6ae586-d279-4ada-bce6-2f2495c9275b",
		"name": "spacexapi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Launch",
			"item": [
				{
					"name": "LaunchesPast",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"schema\");\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"launchesPast\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"mission_name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"launch_date_local\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"launch_site\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"site_name_long\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"site_name_long\"\r",
									"                  ]\r",
									"                },\r",
									"                \"links\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"article_link\": {\r",
									"                      \"type\": \"null\"\r",
									"                    },\r",
									"                    \"video_link\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"article_link\",\r",
									"                    \"video_link\"\r",
									"                  ]\r",
									"                },\r",
									"                \"rocket\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"rocket_name\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"first_stage\": {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"cores\": {\r",
									"                          \"type\": \"array\",\r",
									"                          \"items\": [\r",
									"                            {\r",
									"                              \"type\": \"object\",\r",
									"                              \"properties\": {\r",
									"                                \"flight\": {\r",
									"                                  \"type\": \"integer\"\r",
									"                                },\r",
									"                                \"core\": {\r",
									"                                  \"type\": \"object\",\r",
									"                                  \"properties\": {\r",
									"                                    \"reuse_count\": {\r",
									"                                      \"type\": \"integer\"\r",
									"                                    },\r",
									"                                    \"status\": {\r",
									"                                      \"type\": \"string\"\r",
									"                                    }\r",
									"                                  },\r",
									"                                  \"required\": [\r",
									"                                    \"reuse_count\",\r",
									"                                    \"status\"\r",
									"                                  ]\r",
									"                                }\r",
									"                              },\r",
									"                              \"required\": [\r",
									"                                \"flight\",\r",
									"                                \"core\"\r",
									"                              ]\r",
									"                            }\r",
									"                          ]\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"cores\"\r",
									"                      ]\r",
									"                    },\r",
									"                    \"second_stage\": {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"payloads\": {\r",
									"                          \"type\": \"array\",\r",
									"                          \"items\": [\r",
									"                            {\r",
									"                              \"type\": \"object\",\r",
									"                              \"properties\": {\r",
									"                                \"payload_type\": {\r",
									"                                  \"type\": \"string\"\r",
									"                                },\r",
									"                                \"payload_mass_kg\": {\r",
									"                                  \"type\": \"integer\"\r",
									"                                },\r",
									"                                \"payload_mass_lbs\": {\r",
									"                                  \"type\": \"number\"\r",
									"                                }\r",
									"                              },\r",
									"                              \"required\": [\r",
									"                                \"payload_type\",\r",
									"                                \"payload_mass_kg\",\r",
									"                                \"payload_mass_lbs\"\r",
									"                              ]\r",
									"                            }\r",
									"                          ]\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"payloads\"\r",
									"                      ]\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"rocket_name\",\r",
									"                    \"first_stage\",\r",
									"                    \"second_stage\"\r",
									"                  ]\r",
									"                },\r",
									"                \"ships\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": [\r",
									"                    {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"name\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"home_port\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"image\": {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"name\",\r",
									"                        \"home_port\",\r",
									"                        \"image\"\r",
									"                      ]\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"name\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"home_port\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"image\": {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"name\",\r",
									"                        \"home_port\",\r",
									"                        \"image\"\r",
									"                      ]\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"name\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"home_port\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"image\": {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"name\",\r",
									"                        \"home_port\",\r",
									"                        \"image\"\r",
									"                      ]\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"name\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"home_port\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"image\": {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"name\",\r",
									"                        \"home_port\",\r",
									"                        \"image\"\r",
									"                      ]\r",
									"                    }\r",
									"                  ]\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"mission_name\",\r",
									"                \"launch_date_local\",\r",
									"                \"launch_site\",\r",
									"                \"links\",\r",
									"                \"rocket\",\r",
									"                \"ships\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"launchesPast\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.globals.set(\"schema\",schema)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = pm.globals.get(\"schema\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if the return has data\", function(){\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.data.launchesPast).to.be.not.null\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  launchesPast(limit: 10) {\r\n    mission_name\r\n    launch_date_local\r\n    launch_site {\r\n      site_name_long\r\n    }\r\n    links {\r\n      article_link\r\n      video_link\r\n    }\r\n    rocket {\r\n      rocket_name\r\n      first_stage {\r\n        cores {\r\n          flight\r\n          core {\r\n            reuse_count\r\n            status\r\n          }\r\n        }\r\n      }\r\n      second_stage {\r\n        payloads {\r\n          payload_type\r\n          payload_mass_kg\r\n          payload_mass_lbs\r\n        }\r\n      }\r\n    }\r\n    ships {\r\n      name\r\n      home_port\r\n      image\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Launches",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"schema\");\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"launches\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"details\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"is_tentative\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"launch_date_local\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"launch_date_unix\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"launch_date_utc\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"launch_success\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"launch_site\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"site_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"site_name\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"site_id\",\r",
									"                    \"site_name\"\r",
									"                  ]\r",
									"                },\r",
									"                \"launch_year\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"mission_id\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": [\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  ]\r",
									"                },\r",
									"                \"mission_name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"ships\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": {}\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"details\",\r",
									"                \"id\",\r",
									"                \"is_tentative\",\r",
									"                \"launch_date_local\",\r",
									"                \"launch_date_unix\",\r",
									"                \"launch_date_utc\",\r",
									"                \"launch_success\",\r",
									"                \"launch_site\",\r",
									"                \"launch_year\",\r",
									"                \"mission_id\",\r",
									"                \"mission_name\",\r",
									"                \"ships\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"launches\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.globals.set(\"schema\",schema)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = pm.globals.get(\"schema\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if the return has data\", function(){\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.data.launches.items).to.be.not.null\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  launches(limit: 10) {\r\n    details\r\n    id\r\n    is_tentative\r\n    launch_date_local\r\n    launch_date_unix\r\n    launch_date_utc\r\n    launch_success\r\n    launch_site {\r\n      site_id\r\n      site_name\r\n    }\r\n    launch_year\r\n    mission_id\r\n    mission_name\r\n    ships {\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Launch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"schema\");\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"launch\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"details\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"is_tentative\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"mission_id\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"mission_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"launch_year\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"launch_success\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"launch_date_utc\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"launch_site\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"site_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"site_name\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"site_id\",\r",
									"                \"site_name\"\r",
									"              ]\r",
									"            },\r",
									"            \"launch_date_local\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"launch_date_unix\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"rocket\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"fairings\": {\r",
									"                  \"type\": \"null\"\r",
									"                },\r",
									"                \"rocket_name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"rocket_type\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"fairings\",\r",
									"                \"rocket_name\",\r",
									"                \"rocket_type\"\r",
									"              ]\r",
									"            },\r",
									"            \"tentative_max_precision\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"telemetry\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"flight_club\": {\r",
									"                  \"type\": \"null\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"flight_club\"\r",
									"              ]\r",
									"            },\r",
									"            \"static_fire_date_utc\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"static_fire_date_unix\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ships\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"model\": {\r",
									"                      \"type\": \"null\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"id\",\r",
									"                    \"model\",\r",
									"                    \"name\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"details\",\r",
									"            \"is_tentative\",\r",
									"            \"mission_id\",\r",
									"            \"mission_name\",\r",
									"            \"launch_year\",\r",
									"            \"launch_success\",\r",
									"            \"launch_date_utc\",\r",
									"            \"launch_site\",\r",
									"            \"launch_date_local\",\r",
									"            \"launch_date_unix\",\r",
									"            \"rocket\",\r",
									"            \"tentative_max_precision\",\r",
									"            \"telemetry\",\r",
									"            \"static_fire_date_utc\",\r",
									"            \"static_fire_date_unix\",\r",
									"            \"ships\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"launch\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.globals.set(\"schema\",schema)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = pm.globals.get(\"schema\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if the return has data\", function(){\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.data.launch.items).to.be.not.null\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  launch(id: \"18\") {\r\n    id\r\n    details\r\n    is_tentative\r\n    mission_id\r\n    mission_name\r\n    launch_year\r\n    launch_success\r\n    launch_date_utc\r\n    launch_site {\r\n      site_id\r\n      site_name\r\n    }\r\n    launch_date_local\r\n    launch_date_unix\r\n    rocket {\r\n      fairings {\r\n        recovered\r\n        recovery_attempt\r\n        reused\r\n        ship\r\n      }\r\n      rocket_name\r\n      rocket_type\r\n    }\r\n    tentative_max_precision\r\n    telemetry {\r\n      flight_club\r\n    }\r\n    static_fire_date_utc\r\n    static_fire_date_unix\r\n    ships {\r\n      id\r\n      model\r\n      name\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missions",
			"item": [
				{
					"name": "Missions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"schema\");\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"missions\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"description\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"manufacturers\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": [\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  ]\r",
									"                },\r",
									"                \"website\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"wikipedia\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"id\",\r",
									"                \"name\",\r",
									"                \"description\",\r",
									"                \"manufacturers\",\r",
									"                \"website\",\r",
									"                \"wikipedia\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"missions\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.globals.set(\"schema\",schema)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = pm.globals.get(\"schema\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if the return has data\", function(){\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.data.missions).to.be.not.null\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  missions(limit: 10) {\r\n    id\r\n    name\r\n    description\r\n    manufacturers\r\n    website\r\n    wikipedia\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MissionsResult",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"schema\");\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"missionsResult\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"data\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"description\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"manufacturers\": {\r",
									"                      \"type\": \"array\",\r",
									"                      \"items\": [\r",
									"                        {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      ]\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"id\",\r",
									"                    \"description\",\r",
									"                    \"name\",\r",
									"                    \"manufacturers\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"result\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"totalCount\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"totalCount\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"data\",\r",
									"            \"result\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"missionsResult\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.globals.set(\"schema\",schema)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = pm.globals.get(\"schema\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if the return has data\", function(){\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.data.missionsResult).to.be.not.null\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  missionsResult(limit: 10) {\r\n    data {\r\n      id\r\n      description\r\n      name\r\n      manufacturers\r\n    }\r\n    result {\r\n      totalCount\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "InsertUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"schema\");\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"insert_users\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"affected_rows\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"returning\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"rocket\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"timestamp\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"twitter\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\",\r",
									"                    \"rocket\",\r",
									"                    \"timestamp\",\r",
									"                    \"twitter\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"affected_rows\",\r",
									"            \"returning\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"insert_users\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.globals.set(\"schema\",schema)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = pm.globals.get(\"schema\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if the return has data\", function(){\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.data.insert_users).to.be.not.null\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if the return has data\", function(){\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.globals.set(\"id_user\", jsonData.data.insert_users.returning.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  insert_users(objects: {\r\n    \r\n    name: \"New user\", \r\n    timestamp: \"2021-09-01T18:24:56.796435+00:00\", \r\n    rocket: \"Falcon\", \r\n    twitter: \"\"}, on_conflict: {constraint: users_pkey, update_columns: id}) {\r\n    affected_rows\r\n    returning {\r\n      id\r\n      name\r\n      rocket\r\n      timestamp\r\n      twitter\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}